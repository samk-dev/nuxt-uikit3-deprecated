import type { NuxtUIkitModuleOptions } from './types';
import {
  defineNuxtModule,
  addPlugin,
  addTemplate,
  createResolver
} from '@nuxt/kit';

export default defineNuxtModule<NuxtUIkitModuleOptions>({
  meta: {
    name: 'nuxt-uikit3',
    configKey: 'uikit3',
    compatibility: {
      nuxt: '^3.0.0',
      bridge: false
    }
  },

  defaults: {
    css: {
      coreCss: true,
      coreTheme: true
    }
  },

  setup(options, nuxt) {
    const resolver = createResolver(import.meta.url);

    const cssOptions = options.css;

    if (cssOptions?.coreCss && cssOptions.coreTheme) {
      nuxt.options.css.push(
        resolver.resolve('../node_modules/uikit/dist/css/uikit.min.css')
      );
    }

    if (options.css?.coreCss && !cssOptions?.coreTheme) {
      nuxt.options.css.push(
        resolver.resolve('../node_modules/uikit/dist/css/uikit-core.min.css')
      );
    }

    addTemplate({
      filename: 'nuxt-uikit3.d.ts',
      getContents: () => {
        return `// Generated by nuxt-uikit3
        import UIkit from 'uikit';

        declare module '#app' {
          interface NuxtApp {
            $uikit: typeof UIkit;
          }
        }
        `;
      }
    });

    nuxt.hooks.hook('prepare:types', ({ references }) => {
      references.push({
        path: resolver.resolve(nuxt.options.buildDir, 'nuxt-uikit3.d.ts')
      });
    });

    addPlugin({ src: resolver.resolve('./runtime/plugin'), mode: 'client' });
  }
});
